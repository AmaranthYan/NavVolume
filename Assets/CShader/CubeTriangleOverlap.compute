// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Compute
#pragma kernel Reset2
#pragma kernel Reset32

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct Triangle
{
	float3 vertices[3];
	float3 aabb[2];	
	float3 normal;
	float3 axes[9];
};

StructuredBuffer<Triangle> input;
RWStructuredBuffer<int> output;
uint offset;

float3 corner;
float half_edge;
uint tri_count;
uint tri_count_sqrt;

uint Unfold(uint3 idx)
{
	return idx.x + (idx.y << 1) + (idx.z << 2);
}

[numthreads(4, 4, 4)]
void Compute(uint3 dispatch : SV_DispatchThreadID, uint3 thread : SV_GroupThreadID, uint3 group : SV_GroupID, uint group_idx : SV_GroupIndex)
{
	uint tri_idx = group.x % tri_count_sqrt * tri_count_sqrt + group.y % tri_count_sqrt;
	if (tri_idx >= tri_count)
	{
		return;
	}

	// block of 64 cubes
	uint3 block = uint3(group.xy / tri_count_sqrt, group.z);
	//Result[g_idx] = sub_center;
	
	// overlap test
	uint3 cube = block * 4 + thread;
	float3 center = corner + (cube * 2 + 1) * half_edge;

	Triangle tri = input[tri_idx];

	bool overlap = true;

	// 3 aabb tests
	float3 aabb_min = tri.aabb[0] - center;
	float3 aabb_max = tri.aabb[1] - center;

	int i;
	[unroll] for (i = 0; i < 3; i++)
	{
		overlap = overlap && (aabb_min[i] <= half_edge && aabb_max[i] >= -half_edge);
	}

	// abandon further tests if aabb does not overlap
	if (!overlap)
	{
		return;
	}

	float3 vert[3] = 
	{
		tri.vertices[0] - center,
		tri.vertices[1] - center,
		tri.vertices[2] - center
	};

	float3 half_edge3 = float3(half_edge, half_edge, half_edge);

	// 1 normal test	
	float radius = dot(half_edge3, abs(tri.normal));
	overlap = overlap && (abs(dot(vert[0], tri.normal)) <= radius);

	// 9 axes tests
	[unroll] for (i = 0; i < 9; i++)
	{
		float proj[2] =
		{
			dot(tri.axes[i], vert[i % 3]),
			dot(tri.axes[i], vert[(i + 2) % 3])
		};		
		radius = dot(half_edge3, abs(tri.axes[i]));
		overlap = overlap && (min(proj[0], proj[1]) <= radius && max(proj[0], proj[1]) >= -radius);
	}

	if (!overlap)
	{
		return;
	}

	uint grid = 0;
	uint factor = 1;
	[unroll] while (block.x + block.y + block.z > 0)
	{
		uint3 idx = block & 1;
		grid += Unfold(idx) * factor;
		block >>= 1;
		factor <<= 3;
	}
	grid <<= 1;

	uint bit = (Unfold(thread >> 1) << 3) + Unfold(thread & 1);
	grid += bit / 32;

	grid += offset;

	uint flag = 1 << (bit % 32);

	if (output[grid] & flag)
	{
		return;
	}

	InterlockedOr(output[grid], flag);
}

[numthreads(2, 1, 1)]
void Reset2(uint dispatch : SV_DispatchThreadID)
{
	output[dispatch.x] = 0;
}

[numthreads(32, 1, 1)]
void Reset32(uint dispatch : SV_DispatchThreadID)
{
	output[dispatch.x] = 0;
}